name: Swift Sonar Analysis
on:
  workflow_call:
    inputs:
      SERVICE_LOCATION:
        description: "Swift package location"
        required: true
        type: string
      TEST_SCHEME:
        description: "Test scheme of the swift package"
        required: true
        type: string
      SONAR_URL:
        required: false
        type: string
        default: "https://sonarcloud.io"
      PROJECT_KEY:
        required: false
        type: string
        default: "mosip_${{ github.event.repository.name }}"
      PROJECT_NAME:
        required: false
        type: string
        default: "${{ github.event.repository.name }}"
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_ORGANIZATION:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_URL: ${{ inputs.SONAR_URL }}

jobs:
  sonar-analysis:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Sonar Scanner
        run: brew install sonar-scanner

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "adopt"

      - name: Check if Environmental Variables are Set
        run: |
          if [[ -z $SONAR_TOKEN ]]; then
            echo "SONAR_TOKEN environment variable not set; EXITING.";
            exit 1;
          fi
          if [[ -z $SONAR_ORGANIZATION ]]; then
            echo "SONAR_ORGANIZATION environment variable not set; EXITING.";
            exit 1;
          fi
          if [[ -z $SONAR_URL ]]; then
            echo "SONAR_URL environment variable not set; EXITING.";
            exit 1;
          fi

      - name: Generate Code Coverage
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}

          # Ensure Tests directory exists (to prevent SonarQube errors)
          if [ ! -d "Tests" ]; then
            echo "Tests directory is missing. Creating an empty Tests directory."
            mkdir Tests
          fi

          # Check if Tests directory exists and is not empty
          if [ -d "Tests" ] && [ "$(ls -A Tests)" ]; then
                
              # Run tests
              xcodebuild test \
                  -scheme "${{ inputs.TEST_SCHEME }}" \
                  -destination 'platform=iOS Simulator,OS=latest,name=iPhone 15' \
                  -enableCodeCoverage YES

              # Find test bundle and executable
              TEST_BUNDLE=$(find ~/Library/Developer/Xcode/DerivedData -type d -name "*.xctest" | head -n 1)
              TEST_EXECUTABLE=$(find "$TEST_BUNDLE" -type f -perm -111 | head -n 1)
              COVERAGE_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "Coverage.profdata" | head -n 1)

              # Generate coverage report
              xcrun llvm-cov show \
                  -instr-profile="$COVERAGE_PATH" \
                  "$TEST_EXECUTABLE" \
                  -format=text > coverage.report       
          else
            echo "No tests found. Creating empty coverage report for SonarQube."
            touch coverage.report
          fi

      - name: Run Sonar Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}

          echo "Running SonarQube analysis..."
          sonar-scanner -X \
            -Dsonar.projectKey=${{ inputs.PROJECT_KEY }} \
            -Dsonar.projectName=${{ inputs.PROJECT_NAME }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.sources=Sources \
            -Dsonar.tests=Tests \
            -Dsonar.language=swift \
            -Dsonar.swift.file.suffixes=.swift \
            -Dsonar.host.url=${{ inputs.SONAR_URL }} \
            -Dsonar.swift.coverage.reportPaths=${{ inputs.SERVICE_LOCATION }}/coverage.report \
            -Dsonar.sourceEncoding=UTF-8

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,author,commit,workflow,job # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: "${{ github.event_name != 'pull_request' && failure() }}" # Pick up events even if the job fails or is canceled.
